# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : AppClass.sm

import statemap


class AppClassState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def char(self, fsm):
        self.Default(fsm)

    def digit(self, fsm):
        self.Default(fsm)

    def dotOrSlash(self, fsm):
        self.Default(fsm)

    def end(self, fsm):
        self.Default(fsm)

    def hyphen(self, fsm):
        self.Default(fsm)

    def skip(self, fsm):
        self.Default(fsm)

    def unknown(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class Map_Default(AppClassState):

    def char(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map.Error)
            fsm.getState().Entry(fsm)

    def digit(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map.Error)
            fsm.getState().Entry(fsm)

    def skip(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map.Error)
            fsm.getState().Entry(fsm)

    def hyphen(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map.Error)
            fsm.getState().Entry(fsm)

    def dotOrSlash(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map.Error)
            fsm.getState().Entry(fsm)

    def unknown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map.Error)
            fsm.getState().Entry(fsm)

    def end(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.clear()
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map.Error)
            fsm.getState().Entry(fsm)

class Map_PreCommand(Map_Default):

    def char(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addChar()
        finally:
            fsm.setState(Map.Command)
            fsm.getState().Entry(fsm)

    def digit(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addChar()
        finally:
            fsm.setState(Map.Command)
            fsm.getState().Entry(fsm)

    def dotOrSlash(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addChar()
        finally:
            fsm.setState(Map.Command)
            fsm.getState().Entry(fsm)

    def skip(self, fsm):
        # No actions.
        pass

class Map_Command(Map_Default):

    def char(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.addChar()
        finally:
            fsm.setState(endState)

    def digit(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.addChar()
        finally:
            fsm.setState(endState)

    def dotOrSlash(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.addChar()
        finally:
            fsm.setState(endState)

    def skip(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addCommand()
        finally:
            fsm.setState(Map.PreKeys)
            fsm.getState().Entry(fsm)

class Map_PreKeys(Map_Default):

    def end(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.NotEmptyKeys() :
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(Map.OK)
            fsm.getState().Entry(fsm)
        else:
            Map_Default.end(self, fsm)
        
    def hyphen(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map.Keys)
        fsm.getState().Entry(fsm)

    def skip(self, fsm):
        # No actions.
        pass

class Map_Keys(Map_Default):

    def char(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.addChar()
            ctxt.addKey()
        finally:
            fsm.setState(endState)

    def end(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map.OK)
        fsm.getState().Entry(fsm)

    def skip(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map.PreKeys)
        fsm.getState().Entry(fsm)

class Map_OK(Map_Default):
    pass

class Map_Error(Map_Default):
    pass

class Map(object):

    PreCommand = Map_PreCommand('Map.PreCommand', 0)
    Command = Map_Command('Map.Command', 1)
    PreKeys = Map_PreKeys('Map.PreKeys', 2)
    Keys = Map_Keys('Map.Keys', 3)
    OK = Map_OK('Map.OK', 4)
    Error = Map_Error('Map.Error', 5)
    Default = Map_Default('Map.Default', -1)

class AppClass_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, Map.PreCommand)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
